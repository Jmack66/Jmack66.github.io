"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleScholar = void 0;
const bottleneck_1 = __importDefault(require("bottleneck"));
const cheerio = __importStar(require("cheerio"));
const lodash_1 = require("lodash");
const interfaces_1 = require("./interfaces");
const utils_1 = require("./utils");
class GoogleScholar {
    webClient;
    logger;
    GOOGLE_SCHOLAR_URL_PREFIX = 'https://scholar.google.com';
    GOOGLE_SCHOLAR_URL = `${this.GOOGLE_SCHOLAR_URL_PREFIX}/scholar`;
    perSecLimiter;
    perMinLimiter;
    constructor(webClient, logger) {
        this.webClient = webClient;
        this.logger = logger;
        this.perSecLimiter = new bottleneck_1.default({
            reservoir: 5,
            reservoirRefreshAmount: 1,
            reservoirRefreshInterval: 200,
        });
        this.perMinLimiter = new bottleneck_1.default({
            reservoir: 60,
            reservoirRefreshAmount: 1,
            reservoirRefreshInterval: 1_000,
        });
    }
    getSearchUrl({ keywords, yearHigh, yearLow, authors }) {
        const params = new URLSearchParams({ hl: 'en', as_q: keywords });
        if (authors) {
            params.append('as_sauthors', authors.map(author => `"${author}"`).join(' '));
        }
        if (yearLow) {
            params.append('as_ylo', yearLow.toString());
        }
        if (yearHigh) {
            params.append('as_yhi', yearHigh.toString());
        }
        return `${this.GOOGLE_SCHOLAR_URL}?${params.toString()}`;
    }
    async search(opts) {
        return this.parseUrl(this.getSearchUrl(opts));
    }
    async iteratePages(opts, onPage) {
        const results = [];
        let next = async () => this.search(opts);
        while (next) {
            const page = await next();
            results.push(...page.papers);
            if (!(await onPage(page)))
                break;
            next = page.next;
        }
    }
    async iteratePapers(opts, onPaper, concurrency = 1) {
        return this.iteratePages(opts, async (page) => {
            const chunks = (0, lodash_1.chunk)(page.papers, concurrency);
            for (const chunk of chunks) {
                const resp = await Promise.all(chunk.map(onPaper));
                if (!resp.every(Boolean))
                    return false;
            }
            return true;
        });
    }
    async parseUrl(url) {
        if (!this.isValidUrl(url))
            throw new Error(`Invalid URL: ${url}`);
        this.logger?.debug(`Searching by URL: ${url}`);
        return this.perMinLimiter.schedule(() => {
            return this.perSecLimiter.schedule(async () => {
                const html = await this.webClient.getContent(url);
                return this.processHtml(html);
            });
        });
    }
    getUrl(path) {
        return `${this.GOOGLE_SCHOLAR_URL_PREFIX}${path}`;
    }
    processHtml(html) {
        const $ = cheerio.load(html);
        const papers = $('.gs_r').filter((_, element) => {
            return $(element).find('.gs_ri h3').length > 0;
        });
        const next = $('.gs_ico_nav_next').parent().attr('href');
        const prev = $('.gs_ico_nav_previous').parent().attr('href');
        const nextUrl = next ? this.getUrl(next) : null;
        const prevUrl = prev ? this.getUrl(prev) : null;
        return {
            papers: papers.toArray().map(paper => this.parsePaperElement($, $(paper))),
            totalPapers: this.getTotalPapersCount($),
            nextUrl,
            prevUrl,
            next: nextUrl ? async () => this.parseUrl(nextUrl) : null,
            previous: prevUrl ? async () => this.parseUrl(prevUrl) : null,
        };
    }
    parsePaperElement($, result) {
        const title = (0, utils_1.sanitizeText)(result.find('.gs_ri h3').text());
        const url = result.find('.gs_ri h3 a').attr('href') || '';
        const description = (0, utils_1.sanitizeText)(result.find('.gs_rs').text());
        return {
            title,
            url,
            description,
            source: this.getPaperSource(result),
            authors: this.getAuthors($, result),
            citation: this.getCitation($, result),
            relatedArticlesUrl: this.getRelatedArticlesUrl($, result),
        };
    }
    getPaperSource(result) {
        const type = result.find('span.gs_ctg2').text() === '[PDF]' ? interfaces_1.PaperSourceType.PDF : interfaces_1.PaperSourceType.HTML;
        const url = result.find('.gs_ggsd a').attr('href') || '';
        return {
            type,
            url,
        };
    }
    getAuthors($, result) {
        const authorElements = result.find('.gs_a').find('a');
        return authorElements.toArray().map(authorElement => {
            const url = $(authorElement).attr('href');
            return {
                name: $(authorElement).text(),
                url: url ? this.getUrl(url) : null,
            };
        });
    }
    getCitation($, result) {
        const citationElement = result.find('.gs_fl a').filter((_, element) => {
            return $(element).text().includes('Cited by');
        });
        const url = citationElement.attr('href');
        return {
            count: parseInt(citationElement.text().replace(/\D/g, '')) || 0,
            url: url ? this.getUrl(url) : null,
        };
    }
    getRelatedArticlesUrl($, result) {
        const element = result.find('.gs_fl a').filter((_, el) => {
            return $(el).text().includes('Related articles');
        });
        const url = element.attr('href');
        if (url) {
            return this.getUrl(url);
        }
        return null;
    }
    getTotalPapersCount($) {
        const resultsCountText = $('#gs_ab_md').text();
        const resultsCountMatch = resultsCountText.match(/\W*((\d+|\d{1,3}(.\d{3})*)(\.\d+)?) results/);
        return resultsCountMatch ? parseInt(resultsCountMatch[1].replace(/\./g, '')) : 0;
    }
    isValidUrl(url) {
        return url.startsWith(this.GOOGLE_SCHOLAR_URL_PREFIX);
    }
}
exports.GoogleScholar = GoogleScholar;
//# sourceMappingURL=google-scholar.js.map